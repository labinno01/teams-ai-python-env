import typer
import subprocess
import os
import sys

# Define icons (similar to _common.sh)
ICON_SUCCESS = "‚úÖ"
ICON_ERROR = "‚ùå"
ICON_INFO = "‚ÑπÔ∏è"
ICON_WARN = "‚ö†Ô∏è"
ICON_KEY = "üîë"

def _run_command(command: list[str], check_error: bool = True, capture_output: bool = False) -> subprocess.CompletedProcess:
    """Helper to run shell commands."""
    try:
        result = subprocess.run(command, check=check_error, capture_output=capture_output, text=True)
        return result
    except subprocess.CalledProcessError as e:
        typer.echo(f"{ICON_ERROR} Command failed: {' '.join(command)}")
        if e.stdout:
            typer.echo(f"Stdout: {e.stdout}")
        if e.stderr:
            typer.echo(f"Stderr: {e.stderr}")
        raise

def check_and_start_ssh_agent():
    """
    Checks if ssh-agent is running and guides the user to start it if not.
    """
    typer.echo(f"{ICON_INFO} √âtape 1: V√©rification et d√©marrage de l'agent SSH.")

    ssh_agent_pid = os.environ.get("SSH_AGENT_PID")
    ssh_auth_sock = os.environ.get("SSH_AUTH_SOCK")

    agent_running = False
    if ssh_agent_pid and ssh_auth_sock:
        try:
            # Check if the process exists
            _run_command(["ps", "-p", ssh_agent_pid], check_error=True, capture_output=True)
            agent_running = True
        except subprocess.CalledProcessError:
            agent_running = False

    if not agent_running:
        typer.echo(f"{ICON_WARN} L'agent SSH ne semble pas √™tre en cours d'ex√©cution ou ses variables d'environnement ne sont pas charg√©es.")
        typer.echo(f"{ICON_INFO} Veuillez ex√©cuter la commande suivante dans votre terminal pour d√©marrer l'agent et charger ses variables :")
        typer.echo(f"   eval \"$(ssh-agent -s)\"")
        
        agent_started_confirm = typer.prompt("Avez-vous ex√©cut√© la commande ci-dessus et l'agent SSH a-t-il d√©marr√© avec succ√®s ? (oui/non)")
        
        if agent_started_confirm.lower() == "oui":
            typer.echo(f"{ICON_SUCCESS} Agent SSH d√©marr√© et variables charg√©es (confirm√© par l'utilisateur).")
            # Re-check environment variables after user confirmation
            # This part is tricky as Python script's env won't change,
            # but we assume user's shell env is updated for subsequent manual commands.
        else:
            typer.echo(f"{ICON_ERROR} L'agent SSH n'a pas √©t√© d√©marr√© ou confirm√©. Impossible de continuer sans un agent SSH fonctionnel.")
            typer.echo(f"{ICON_INFO} Pistes de r√©solution :")
            typer.echo(f"   - Assurez-vous que 'ssh-agent' est install√© sur votre syst√®me.")
            typer.echo(f"   - Red√©marrez votre terminal et r√©essayez.")
            typer.echo(f"   - V√©rifiez les messages d'erreur lors de l'ex√©cution de 'eval \"$(ssh-agent -s)\"' .")
            sys.exit(1)
    else:
        typer.echo(f"{ICON_SUCCESS} L'agent SSH est d√©j√† en cours d'ex√©cution et ses variables sont charg√©es.")

def add_ssh_key_to_agent():
    """
    Guides the user to add their SSH key to the agent.
    """
    typer.echo("\n" + f"{ICON_INFO} √âtape 2: Ajout de votre cl√© SSH √† l'agent.")
    typer.echo("   Nous allons essayer d'ajouter la cl√© par d√©faut ou celle que vous sp√©cifiez.")

    default_key_path = os.path.expanduser("~/.ssh/github-teams-ai-python-env")
    ssh_key_path = typer.prompt(f"Entrez le chemin complet de votre cl√© priv√©e SSH (laissez vide pour la cl√© par d√©faut {default_key_path})", default=default_key_path)

    if not os.path.exists(ssh_key_path):
        typer.echo(f"{ICON_ERROR} Le fichier de cl√© priv√©e '{ssh_key_path}' n'existe pas.")
        typer.echo(f"{ICON_INFO} Veuillez vous assurer que la cl√© existe ou g√©n√©rez-en une nouvelle avec 'setup-git-ssh.sh'.")
        sys.exit(1)

    # Check if key is already added
    try:
        list_keys_result = _run_command(["ssh-add", "-l"], capture_output=True)
        key_fingerprint_result = _run_command(["ssh-keygen", "-lf", ssh_key_path], capture_output=True)
        
        # Extract fingerprint from ssh-keygen output (e.g., "2048 SHA256:XXXXX noadresse@noname.com (RSA)")
        key_fingerprint = key_fingerprint_result.stdout.split()[1] # Get the SHA256:XXXXX part

        if key_fingerprint in list_keys_result.stdout:
            typer.echo(f"{ICON_SUCCESS} La cl√© '{ssh_key_path}' est d√©j√† charg√©e dans l'agent SSH.")
            return
    except Exception:
        # If ssh-add -l fails or keygen fails, assume key is not added or agent is not ready
        pass

    typer.echo(f"{ICON_INFO} Ajout de la cl√© '{ssh_key_path}' √† l'agent SSH...")
    try:
        _run_command(["ssh-add", ssh_key_path])
        typer.echo(f"{ICON_SUCCESS} Cl√© ajout√©e √† l'agent SSH.")
    except subprocess.CalledProcessError:
        typer.echo(f"{ICON_ERROR} √âchec de l'ajout de la cl√© √† l'agent SSH. V√©rifiez votre mot de passe ou les permissions de la cl√©.")
        sys.exit(1)

def verify_github_public_key():
    """
    Guides the user to verify their public key on GitHub.
    """
    typer.echo("\n" + f"{ICON_INFO} √âtape 3: V√©rification de votre cl√© publique sur GitHub.")
    typer.echo("   Ceci est une √©tape MANUELLE. Vous devez vous assurer que la cl√© publique")
    typer.echo("   correspondante √† votre cl√© priv√©e est bien ajout√©e √† votre compte GitHub.")
    
    default_key_path = os.path.expanduser("~/.ssh/github-teams-ai-python-env")
    public_key_path = default_key_path + ".pub"
    
    typer.echo(f"   Votre cl√© publique est g√©n√©ralement situ√©e √† '{public_key_path}'.")
    typer.echo("\n   Pour v√©rifier :")
    typer.echo(f"   1. Copiez le contenu de votre cl√© publique :")
    typer.echo(f"      cat '{public_key_path}'")
    typer.echo(f"   2. Allez sur GitHub.com -> Settings -> SSH and GPG keys.")
    typer.echo(f"   3. Assurez-vous que la cl√© copi√©e est pr√©sente dans la liste.")
    
    confirm_github_key = typer.prompt("Avez-vous v√©rifi√© que votre cl√© publique est sur GitHub ? (oui/non)")
    if confirm_github_key.lower() != "oui":
        typer.echo(f"{ICON_WARN} Veuillez ajouter votre cl√© publique √† GitHub pour que l'authentification fonctionne.")
        sys.exit(0) # Exit gracefully if user doesn't confirm

def test_ssh_connection_to_github():
    """
    Tests the SSH connection to GitHub.
    """
    typer.echo("\n" + f"{ICON_INFO} √âtape 4: Acceptation de la cl√© d'h√¥te de GitHub.")
    typer.echo("   Nous allons tenter une connexion test √† GitHub pour ajouter leur cl√© d'h√¥te √† vos 'known_hosts'.")
    typer.echo("   Si vous √™tes invit√© √† confirmer, tapez 'yes'.")
    
    try:
        # ssh -T git@github.com returns exit code 1 on success for non-shell access
        result = _run_command(["ssh", "-T", "git@github.com"], check_error=False, capture_output=True)
        
        if result.returncode == 1:
            typer.echo(f"{ICON_SUCCESS} Authentification SSH √† GitHub r√©ussie (code 1 est normal pour ssh -T).")
        elif result.returncode == 255:
            typer.echo(f"{ICON_ERROR} √âchec de la connexion SSH √† GitHub (code 255). Cela peut indiquer un probl√®me de r√©seau ou de pare-feu.")
            sys.exit(1)
        else:
            typer.echo(f"{ICON_WARN} La connexion SSH √† GitHub a retourn√© un code inattendu ({result.returncode}).")
            typer.echo(f"{ICON_INFO} Veuillez v√©rifier votre configuration SSH manuellement.")
            sys.exit(1)
    except Exception as e:
        typer.echo(f"{ICON_ERROR} Une erreur inattendue est survenue lors du test SSH: {e}")
        sys.exit(1)

def run_ssh_setup_workflow():
    """
    Runs the complete SSH setup workflow.
    """
    typer.echo(f"{ICON_KEY} Assistant de configuration SSH pour Git (GitHub)")
    typer.echo("-------------------------------------------------")
    
    check_and_start_ssh_agent()
    add_ssh_key_to_agent()
    verify_github_public_key()
    test_ssh_connection_to_github()
    
    typer.echo("\n" + f"{ICON_SUCCESS} Configuration SSH pour Git termin√©e. Vous devriez maintenant pouvoir pousser vos changements.")

if __name__ == "__main__":
    typer.run(run_ssh_setup_workflow)
