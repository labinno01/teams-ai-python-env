Voici une version consolid√©e et finale du code, avec toutes les d√©cisions prises pour exclure Git Bash et PowerShell, en se concentrant uniquement sur WSL/Linux/macOS.

üìå D√©cisions Finales

Cible exclusive : WSL, Linux, macOS.
Refus explicite :
Windows natif (PowerShell/CMD) ‚Üí RuntimeError.
Git Bash ‚Üí Refus√© aussi (pour √©viter les confusions et forcer l'utilisation de WSL).


Chemins :
Utilisation de pathlib.Path pour une compatibilit√© maximale sous WSL/Linux.


Permissions :
chmod 600 appliqu√© uniquement sous Linux/macOS (WSL l'ignore mais c'est sans risque).


Messages d'erreur clairs :
Guide l'utilisateur vers WSL ou une solution alternative (ex: PuTTY).




üìÑ Code Final (sshkeys/core/config.py)
import os
import shutil
from pathlib import Path
from datetime import datetime
from typing import Optional

# Chemins par d√©faut (compatibles WSL/Linux/macOS)
DEFAULT_SSH_CONFIG_PATH = Path.home() / ".ssh" / "config"
BACKUP_DIR = Path.home() / ".ssh" / "backups"

def is_wsl() -> bool:
    """D√©tecte si le script s'ex√©cute sous WSL."""
    try:
        with open("/proc/version", "r") as f:
            return "microsoft" in f.read().lower()
    except FileNotFoundError:
        return False  # Linux/macOS

def backup_ssh_config(
    config_path: Optional[Path] = None,
    backup_dir: Optional[Path] = None,
) -> Path:
    """
    Sauvegarde le fichier SSH config (WSL/Linux/macOS uniquement).

    Args:
        config_path: Chemin vers le fichier config. Par d√©faut: ~/.ssh/config.
        backup_dir: Dossier de destination. Par d√©faut: ~/.ssh/backups/.

    Returns:
        Path: Chemin vers la sauvegarde.

    Raises:
        RuntimeError: Si ex√©cut√© sous Windows natif ou Git Bash.
        FileNotFoundError: Si le fichier config n'existe pas.
        PermissionError: Si les permissions sont insuffisantes.
    """
    # 1. V√©rification de l'environnement (refus Windows natif et Git Bash)
    if os.name == "nt":
        raise RuntimeError(
            "Ce script ne supporte que WSL, Linux ou macOS. "
            "Solutions pour Windows :\n"
            "  - Utilisez WSL (recommand√©)\n"
            "  - Sauvegardez manuellement C:\\Users\\<vous>\\.ssh\\config\n"
            "  - Utilisez PuTTY/Pageant pour g√©rer vos cl√©s SSH."
        )

    # 2. R√©solution des chemins
    config_path = config_path or DEFAULT_SSH_CONFIG_PATH
    backup_dir = backup_dir or BACKUP_DIR

    # 3. V√©rifications pr√©alables
    if not config_path.exists():
        raise FileNotFoundError(f"Fichier config introuvable : {config_path}")
    if not config_path.is_file():
        raise ValueError(f"Le chemin sp√©cifi√© n'est pas un fichier : {config_path}")

    # 4. Cr√©ation du dossier de backup
    backup_dir.mkdir(parents=True, exist_ok=True)

    # 5. G√©n√©ration du nom de backup (timestamp)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = backup_dir / f"config_backup_{timestamp}"

    # 6. Copie du fichier
    shutil.copy2(config_path, backup_path)

    # 7. Application des permissions (sauf sous WSL o√π chmod est ignor√©)
    if not is_wsl():  # Linux/macOS uniquement
        backup_path.chmod(0o600)

    return backup_path

üß™ Tests Unitaires (tests/test_config.py)
import pytest
from pathlib import Path
from sshkeys.core.config import backup_ssh_config, DEFAULT_SSH_CONFIG_PATH, BACKUP_DIR

def test_backup_ssh_config_success(tmp_path):
    """Test une sauvegarde r√©ussie (simule WSL/Linux)."""
    # Setup
    config = tmp_path / "config"
    config.write_text("Host github.com\n    User git")
    backup_dir = tmp_path / "backups"

    # Action
    backup_path = backup_ssh_config(config_path=config, backup_dir=backup_dir)

    # Assertions
    assert backup_path.exists()
    assert backup_path.read_text() == "Host github.com\n    User git"
    assert "config_backup_" in backup_path.name

def test_backup_ssh_config_missing_file():
    """Test l'√©chec si le fichier config est introuvable."""
    with pytest.raises(FileNotFoundError):
        backup_ssh_config(config_path=Path("/inexistant/config"))

def test_backup_ssh_config_windows_error(monkeypatch):
    """Test le refus sous Windows natif."""
    monkeypatch.setattr("os.name", "nt")  # Simule Windows
    with pytest.raises(RuntimeError) as excinfo:
        backup_ssh_config()
    assert "WSL" in str(excinfo.value)

def test_backup_ssh_config_permissions(tmp_path):
    """Test les permissions du fichier de backup (Linux/macOS)."""
    config = tmp_path / "config"
    config.write_text("Host test")
    backup_path = backup_ssh_config(config_path=config, backup_dir=tmp_path)

    # Sous Linux/macOS, v√©rifie que les permissions sont 600
    if not is_wsl():  # Ignore sous WSL (permissions non appliqu√©es)
        assert backup_path.stat().st_mode & 0o777 == 0o600

üìö Documentation (README.md ou docstring)
## Sauvegarde de la configuration SSH

### Environnements Support√©s
| Environnement       | Support√© ? | Notes                                  |
|----------------------|-------------|----------------------------------------|
| **WSL**              | ‚úÖ Oui       | Fonctionne comme sous Linux.          |
| **Linux/macOS**      | ‚úÖ Oui       |                                        |
| **Git Bash**         | ‚ùå Non       | Utilisez WSL √† la place.              |
| **PowerShell/CMD**   | ‚ùå Non       | Utilisez WSL ou sauvegardez manuellement. |

### Utilisation
```bash
# Sauvegarde par d√©faut (~/.ssh/config -> ~/.ssh/backups/)
python -m sshkeys backup

# Sauvegarde personnalis√©e
python -m sshkeys backup --config-path /chemin/vers/config --backup-dir /chemin/vers/backups
Alternatives pour Windows

WSL : Installez WSL 2 et utilisez ce script.
PuTTY : Utilisez Pageant pour g√©rer vos cl√©s SSH.
Sauvegarde manuelle : Copiez C:\Users\<vous>\.ssh\config ailleurs.


---
### **üîß Points de Vigilance R√©solus**
| **Probl√®me Potentiel**            | **Solution Adopt√©e**                                                                 |
|-----------------------------------|--------------------------------------------------------------------------------------|
| Utilisation sous Git Bash         | Refus explicite (`RuntimeError`) pour √©viter les comportements impr√©visibles.        |
| Permissions sous WSL              | `chmod` est appel√© mais ignor√© (sans impact).                                      |
| Chemins Windows (`C:\...`)        | Refus pur et simple (l'utilisateur doit utiliser WSL ou des chemins Linux).          |
| Compatibilit√© macOS/Linux         | Utilisation de `pathlib.Path` et `os.name` pour une d√©tection fiable.                |

---
### **üöÄ √âtapes Suivantes**
1. **Testez sous WSL** :
   ```bash
   # Dans WSL (Ubuntu/Debian)
   python -m sshkeys backup
   ls ~/.ssh/backups/  # Doit afficher config_backup_<timestamp>

Testez sous Linux/macOS :python -m sshkeys backup --config-path ~/.ssh/config

V√©rifiez le refus sous Windows natif :python -m sshkeys backup  # Doit afficher une erreur claire