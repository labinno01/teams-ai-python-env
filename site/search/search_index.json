{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Git Scripts Documentation This documentation provides information about the Git utility scripts.","title":"Home"},{"location":"#welcome-to-git-scripts-documentation","text":"This documentation provides information about the Git utility scripts.","title":"Welcome to Git Scripts Documentation"},{"location":"cicd/","text":"Int\u00e9gration Continue (CI) avec GitHub Actions Ce document d\u00e9crit la mise en place d'un workflow d'Int\u00e9gration Continue (CI) simple pour votre projet, utilisant GitHub Actions. L'objectif est d'automatiser la v\u00e9rification de la qualit\u00e9 du code \u00e0 chaque modification. 1. Qu'est-ce que l'Int\u00e9gration Continue ? L'Int\u00e9gration Continue (CI) est une pratique de d\u00e9veloppement logiciel o\u00f9 les d\u00e9veloppeurs int\u00e8grent fr\u00e9quemment leur code dans un d\u00e9p\u00f4t partag\u00e9. Chaque int\u00e9gration est ensuite v\u00e9rifi\u00e9e par une construction automatis\u00e9e (build) et des tests automatis\u00e9s. B\u00e9n\u00e9fices : * D\u00e9tection rapide des erreurs. * Am\u00e9lioration de la qualit\u00e9 du code. * R\u00e9duction des risques lors des fusions de code. * Confiance accrue dans la base de code. 2. Workflow de Linting avec ruff Nous avons mis en place un premier workflow simple qui utilise l'outil ruff pour v\u00e9rifier la qualit\u00e9 de votre code Python. Fichier de Configuration Le workflow est d\u00e9fini dans le fichier .github/workflows/lint.yml : name: Lint Code on: push: branches: [ main ] pull_request: branches: [ main ] jobs: lint: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Set up Python uses: actions/setup-python@v4 with: python-version: '3.x' - name: Install dependencies run: | python -m pip install --upgrade pip pip install ruff - name: Run ruff run: | ruff check . Explication du Workflow name: Lint Code : Le nom du workflow, visible dans l'interface GitHub. on: : D\u00e9finit les \u00e9v\u00e9nements qui d\u00e9clenchent le workflow : push sur la branche main . pull_request ciblant la branche main . jobs: : Contient les diff\u00e9rentes t\u00e2ches \u00e0 ex\u00e9cuter. Ici, un seul job nomm\u00e9 lint . runs-on: ubuntu-latest : Le job s'ex\u00e9cutera sur une machine virtuelle Ubuntu h\u00e9berg\u00e9e par GitHub. steps: : La s\u00e9quence d'actions \u00e0 r\u00e9aliser : uses: actions/checkout@v3 : T\u00e9l\u00e9charge le code de votre d\u00e9p\u00f4t sur la machine virtuelle. name: Set up Python et uses: actions/setup-python@v4 : Configure un environnement Python (derni\u00e8re version 3.x) n\u00e9cessaire pour ruff . name: Install dependencies : Installe pip et ruff . name: Run ruff : Ex\u00e9cute la commande ruff check . pour analyser votre code. 3. Comment Utiliser ce Workflow ? Commitez et Poussez le Fichier : Le workflow sera actif d\u00e8s que le fichier .github/workflows/lint.yml sera pouss\u00e9 sur votre d\u00e9p\u00f4t GitHub. bash git add .github/workflows/lint.yml git commit -m \"feat: Add GitHub Actions workflow for linting with ruff\" git push D\u00e9clenchement Automatique : Chaque fois que vous pousserez du code sur main ou ouvrirez/mettrez \u00e0 jour une Pull Request vers main , le workflow se lancera automatiquement. 4. Visualiser les R\u00e9sultats et Corriger les Erreurs Interface GitHub : Rendez-vous sur la page de votre Pull Request ou sur l'onglet \"Actions\" de votre d\u00e9p\u00f4t GitHub. Statut : Vous verrez le statut du workflow (en cours, succ\u00e8s, \u00e9chec). Logs D\u00e9taill\u00e9s : En cas d'\u00e9chec, cliquez sur le lien \"Details\" \u00e0 c\u00f4t\u00e9 du job lint . Vous acc\u00e9derez aux logs complets, affichant les messages d'erreur de ruff (lignes concern\u00e9es, type d'erreur, etc.). Correction : Corrigez les erreurs localement, commitez et poussez \u00e0 nouveau. Le workflow se relancera pour valider vos corrections. 5. Le Workflow CI/CD comme Filet de S\u00e9curit\u00e9 Il est crucial de comprendre que ce workflow est un filet de s\u00e9curit\u00e9 . Vous devez toujours ex\u00e9cuter ruff check . (et vos tests) localement avant de pousser votre code. Le CI est l\u00e0 pour : * Garantir que les standards sont respect\u00e9s par tous les contributeurs. * Attraper les erreurs qui auraient pu \u00eatre manqu\u00e9es localement. * Assurer la qualit\u00e9 constante de la branche principale.","title":"CI/CD"},{"location":"cicd/#integration-continue-ci-avec-github-actions","text":"Ce document d\u00e9crit la mise en place d'un workflow d'Int\u00e9gration Continue (CI) simple pour votre projet, utilisant GitHub Actions. L'objectif est d'automatiser la v\u00e9rification de la qualit\u00e9 du code \u00e0 chaque modification.","title":"Int\u00e9gration Continue (CI) avec GitHub Actions"},{"location":"cicd/#1-quest-ce-que-lintegration-continue","text":"L'Int\u00e9gration Continue (CI) est une pratique de d\u00e9veloppement logiciel o\u00f9 les d\u00e9veloppeurs int\u00e8grent fr\u00e9quemment leur code dans un d\u00e9p\u00f4t partag\u00e9. Chaque int\u00e9gration est ensuite v\u00e9rifi\u00e9e par une construction automatis\u00e9e (build) et des tests automatis\u00e9s. B\u00e9n\u00e9fices : * D\u00e9tection rapide des erreurs. * Am\u00e9lioration de la qualit\u00e9 du code. * R\u00e9duction des risques lors des fusions de code. * Confiance accrue dans la base de code.","title":"1. Qu'est-ce que l'Int\u00e9gration Continue ?"},{"location":"cicd/#2-workflow-de-linting-avec-ruff","text":"Nous avons mis en place un premier workflow simple qui utilise l'outil ruff pour v\u00e9rifier la qualit\u00e9 de votre code Python.","title":"2. Workflow de Linting avec ruff"},{"location":"cicd/#fichier-de-configuration","text":"Le workflow est d\u00e9fini dans le fichier .github/workflows/lint.yml : name: Lint Code on: push: branches: [ main ] pull_request: branches: [ main ] jobs: lint: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Set up Python uses: actions/setup-python@v4 with: python-version: '3.x' - name: Install dependencies run: | python -m pip install --upgrade pip pip install ruff - name: Run ruff run: | ruff check .","title":"Fichier de Configuration"},{"location":"cicd/#explication-du-workflow","text":"name: Lint Code : Le nom du workflow, visible dans l'interface GitHub. on: : D\u00e9finit les \u00e9v\u00e9nements qui d\u00e9clenchent le workflow : push sur la branche main . pull_request ciblant la branche main . jobs: : Contient les diff\u00e9rentes t\u00e2ches \u00e0 ex\u00e9cuter. Ici, un seul job nomm\u00e9 lint . runs-on: ubuntu-latest : Le job s'ex\u00e9cutera sur une machine virtuelle Ubuntu h\u00e9berg\u00e9e par GitHub. steps: : La s\u00e9quence d'actions \u00e0 r\u00e9aliser : uses: actions/checkout@v3 : T\u00e9l\u00e9charge le code de votre d\u00e9p\u00f4t sur la machine virtuelle. name: Set up Python et uses: actions/setup-python@v4 : Configure un environnement Python (derni\u00e8re version 3.x) n\u00e9cessaire pour ruff . name: Install dependencies : Installe pip et ruff . name: Run ruff : Ex\u00e9cute la commande ruff check . pour analyser votre code.","title":"Explication du Workflow"},{"location":"cicd/#3-comment-utiliser-ce-workflow","text":"Commitez et Poussez le Fichier : Le workflow sera actif d\u00e8s que le fichier .github/workflows/lint.yml sera pouss\u00e9 sur votre d\u00e9p\u00f4t GitHub. bash git add .github/workflows/lint.yml git commit -m \"feat: Add GitHub Actions workflow for linting with ruff\" git push D\u00e9clenchement Automatique : Chaque fois que vous pousserez du code sur main ou ouvrirez/mettrez \u00e0 jour une Pull Request vers main , le workflow se lancera automatiquement.","title":"3. Comment Utiliser ce Workflow ?"},{"location":"cicd/#4-visualiser-les-resultats-et-corriger-les-erreurs","text":"Interface GitHub : Rendez-vous sur la page de votre Pull Request ou sur l'onglet \"Actions\" de votre d\u00e9p\u00f4t GitHub. Statut : Vous verrez le statut du workflow (en cours, succ\u00e8s, \u00e9chec). Logs D\u00e9taill\u00e9s : En cas d'\u00e9chec, cliquez sur le lien \"Details\" \u00e0 c\u00f4t\u00e9 du job lint . Vous acc\u00e9derez aux logs complets, affichant les messages d'erreur de ruff (lignes concern\u00e9es, type d'erreur, etc.). Correction : Corrigez les erreurs localement, commitez et poussez \u00e0 nouveau. Le workflow se relancera pour valider vos corrections.","title":"4. Visualiser les R\u00e9sultats et Corriger les Erreurs"},{"location":"cicd/#5-le-workflow-cicd-comme-filet-de-securite","text":"Il est crucial de comprendre que ce workflow est un filet de s\u00e9curit\u00e9 . Vous devez toujours ex\u00e9cuter ruff check . (et vos tests) localement avant de pousser votre code. Le CI est l\u00e0 pour : * Garantir que les standards sont respect\u00e9s par tous les contributeurs. * Attraper les erreurs qui auraient pu \u00eatre manqu\u00e9es localement. * Assurer la qualit\u00e9 constante de la branche principale.","title":"5. Le Workflow CI/CD comme Filet de S\u00e9curit\u00e9"},{"location":"installation/","text":"Installation du Patrimoine de Scripts Git Ce document explique comment installer l'ensemble des scripts utilitaires Git dans un nouveau projet \u00e0 l'aide du script d'installation install.sh . L'objectif est de vous permettre de d\u00e9ployer rapidement votre environnement de travail Git standardis\u00e9 sur n'importe quel nouveau projet. 1. Commande d'Installation Rapide Pour installer les scripts, placez-vous \u00e0 la racine de votre nouveau projet et ex\u00e9cutez la commande suivante dans votre terminal : bash -c \"$(curl -fsSL https://raw.githubusercontent.com/labinno01/teams-ai-python-env/main/install.sh)\" Cette commande t\u00e9l\u00e9charge et ex\u00e9cute le script d'installation de mani\u00e8re s\u00e9curis\u00e9e. 2. Que Fait le Script d'Installation ? Le script est con\u00e7u pour \u00eatre transparent et didactique. Voici les \u00e9tapes qu'il r\u00e9alise : V\u00e9rification de curl : Il s'assure que l'outil curl est disponible sur votre syst\u00e8me. Cr\u00e9ation du Dossier : Il cr\u00e9e un dossier .git-scripts/ \u00e0 la racine de votre projet pour y stocker tous les scripts utilitaires. T\u00e9l\u00e9chargement des Scripts : Il t\u00e9l\u00e9charge la derni\u00e8re version de chaque script ( setup-ssh.sh , init-repository.sh , etc.) depuis le d\u00e9p\u00f4t GitHub de r\u00e9f\u00e9rence. T\u00e9l\u00e9chargement de version.json : Il r\u00e9cup\u00e8re le fichier version.json pour que les scripts connaissent leur version actuelle. Permissions : Il rend automatiquement les scripts t\u00e9l\u00e9charg\u00e9s ex\u00e9cutables ( chmod +x ). Mise \u00e0 jour du .gitignore : Il vous propose d'ajouter le dossier .git-scripts/ \u00e0 votre fichier .gitignore pour \u00e9viter de commiter les outils eux-m\u00eames dans votre nouveau projet. Message de Fin : Il affiche un message de succ\u00e8s avec des instructions pour commencer \u00e0 utiliser les scripts. 3. Personnalisation (Utilisation avec un D\u00e9p\u00f4t Priv\u00e9) Si vous avez \"fork\u00e9\" le projet teams-ai-python-env ou si vous souhaitez maintenir votre propre version des scripts dans un d\u00e9p\u00f4t priv\u00e9 , vous pouvez facilement adapter le script. T\u00e9l\u00e9chargez le script install.sh localement au lieu de l'ex\u00e9cuter directement via curl . Modifiez la variable REPO_URL au d\u00e9but du script pour pointer vers votre d\u00e9p\u00f4t. ```bash Remplacez l'URL par l'URL de votre d\u00e9p\u00f4t REPO_URL=\"https://raw.githubusercontent.com/VOTRE_NOM/VOTRE_DEPOT/main\" ``` Si votre d\u00e9p\u00f4t est priv\u00e9, assurez-vous d'avoir configur\u00e9 votre acc\u00e8s SSH et utilisez l'URL SSH de votre d\u00e9p\u00f4t pour que l'authentification se fasse de mani\u00e8re transparente.","title":"Installation"},{"location":"installation/#installation-du-patrimoine-de-scripts-git","text":"Ce document explique comment installer l'ensemble des scripts utilitaires Git dans un nouveau projet \u00e0 l'aide du script d'installation install.sh . L'objectif est de vous permettre de d\u00e9ployer rapidement votre environnement de travail Git standardis\u00e9 sur n'importe quel nouveau projet.","title":"Installation du Patrimoine de Scripts Git"},{"location":"installation/#1-commande-dinstallation-rapide","text":"Pour installer les scripts, placez-vous \u00e0 la racine de votre nouveau projet et ex\u00e9cutez la commande suivante dans votre terminal : bash -c \"$(curl -fsSL https://raw.githubusercontent.com/labinno01/teams-ai-python-env/main/install.sh)\" Cette commande t\u00e9l\u00e9charge et ex\u00e9cute le script d'installation de mani\u00e8re s\u00e9curis\u00e9e.","title":"1. Commande d'Installation Rapide"},{"location":"installation/#2-que-fait-le-script-dinstallation","text":"Le script est con\u00e7u pour \u00eatre transparent et didactique. Voici les \u00e9tapes qu'il r\u00e9alise : V\u00e9rification de curl : Il s'assure que l'outil curl est disponible sur votre syst\u00e8me. Cr\u00e9ation du Dossier : Il cr\u00e9e un dossier .git-scripts/ \u00e0 la racine de votre projet pour y stocker tous les scripts utilitaires. T\u00e9l\u00e9chargement des Scripts : Il t\u00e9l\u00e9charge la derni\u00e8re version de chaque script ( setup-ssh.sh , init-repository.sh , etc.) depuis le d\u00e9p\u00f4t GitHub de r\u00e9f\u00e9rence. T\u00e9l\u00e9chargement de version.json : Il r\u00e9cup\u00e8re le fichier version.json pour que les scripts connaissent leur version actuelle. Permissions : Il rend automatiquement les scripts t\u00e9l\u00e9charg\u00e9s ex\u00e9cutables ( chmod +x ). Mise \u00e0 jour du .gitignore : Il vous propose d'ajouter le dossier .git-scripts/ \u00e0 votre fichier .gitignore pour \u00e9viter de commiter les outils eux-m\u00eames dans votre nouveau projet. Message de Fin : Il affiche un message de succ\u00e8s avec des instructions pour commencer \u00e0 utiliser les scripts.","title":"2. Que Fait le Script d'Installation ?"},{"location":"installation/#3-personnalisation-utilisation-avec-un-depot-prive","text":"Si vous avez \"fork\u00e9\" le projet teams-ai-python-env ou si vous souhaitez maintenir votre propre version des scripts dans un d\u00e9p\u00f4t priv\u00e9 , vous pouvez facilement adapter le script. T\u00e9l\u00e9chargez le script install.sh localement au lieu de l'ex\u00e9cuter directement via curl . Modifiez la variable REPO_URL au d\u00e9but du script pour pointer vers votre d\u00e9p\u00f4t. ```bash","title":"3. Personnalisation (Utilisation avec un D\u00e9p\u00f4t Priv\u00e9)"},{"location":"installation/#remplacez-lurl-par-lurl-de-votre-depot","text":"REPO_URL=\"https://raw.githubusercontent.com/VOTRE_NOM/VOTRE_DEPOT/main\" ``` Si votre d\u00e9p\u00f4t est priv\u00e9, assurez-vous d'avoir configur\u00e9 votre acc\u00e8s SSH et utilisez l'URL SSH de votre d\u00e9p\u00f4t pour que l'authentification se fasse de mani\u00e8re transparente.","title":"Remplacez l'URL par l'URL de votre d\u00e9p\u00f4t"},{"location":"scripts/utils/commit-push/","text":"Identification ID de l'Exigence : GIT-REQ-003 Nom du Script : commit-push.sh Version : G\u00e9r\u00e9e par les tags Git (ex: v0.1.0) Objectif (Raison d'\u00eatre) : Simplifier et acc\u00e9l\u00e9rer le processus quotidien de sauvegarde du travail en combinant les \u00e9tapes d'indexation, de commit et de push en une seule commande. Description Fonctionnelle (Le \"Quoi\") D\u00e9clencheur : Manuellement par le d\u00e9veloppeur lorsqu'il souhaite enregistrer et synchroniser ses modifications locales avec le d\u00e9p\u00f4t distant. Processus : V\u00e9rification du Contexte : Le script s'assure qu'il est bien ex\u00e9cut\u00e9 \u00e0 l'int\u00e9rieur d'un d\u00e9p\u00f4t Git. V\u00e9rification des Modifications : Il v\u00e9rifie s'il y a des modifications \u00e0 commiter (git status). S'il n'y en a aucune, il informe l'utilisateur et se termine proprement. Configuration Utilisateur : Il appelle la fonction check_git_config de _common.sh pour s'assurer que l'identit\u00e9 de l'utilisateur est configur\u00e9e. Indexation : Il ajoute toutes les modifications actuelles (fichiers modifi\u00e9s, nouveaux et supprim\u00e9s) \u00e0 l'index avec git add .. Message de Commit : Si un argument est pass\u00e9 au script, il est utilis\u00e9 comme message de commit. Sinon, le script demande interactivement \u00e0 l'utilisateur d'entrer un message de commit. Cette saisie est obligatoire. Commit : Il ex\u00e9cute git commit avec le message fourni. Push : Il ex\u00e9cute git push. Le script est con\u00e7u pour fonctionner sur une branche qui suit d\u00e9j\u00e0 une branche distante. R\u00e9sultat Attendu : Toutes les modifications du r\u00e9pertoire de travail sont commit\u00e9es localement avec le message fourni, et ce nouveau commit est pouss\u00e9 vers la branche distante correspondante. Exigences Non-Fonctionnelles (Les \"Contraintes\") Performance : L'ex\u00e9cution est rapide, la dur\u00e9e d\u00e9pendant principalement du volume de donn\u00e9es \u00e0 pousser (git push). S\u00e9curit\u00e9 : Pas de contraintes de s\u00e9curit\u00e9 particuli\u00e8res. Configuration : Aucune. Le script est autonome. Le message de commit peut \u00eatre fourni soit de mani\u00e8re interactive, soit via un argument en ligne de commande. Gestion des Erreurs : Doit se terminer proprement s'il n'y a rien \u00e0 commiter. Doit \u00e9chouer avec un message clair si la commande git commit ou git push \u00e9choue (par exemple, en cas de conflits ou si la branche locale ne suit aucune branche distante). Sp\u00e9cifications Techniques (Le \"Comment\") Langage et D\u00e9pendances : Bash, git. Doit \"sourcer\" _common.sh. Environnement d'Ex\u00e9cution : Tout environnement de type Unix (Linux, macOS, WSL). Entr\u00e9es / Sorties : Arguments en ligne de commande : Optionnel. Une cha\u00eene de caract\u00e8res qui sera utilis\u00e9e comme message de commit. (ex: ./commit-push.sh \"feat: Ajouter une nouvelle fonctionnalit\u00e9\") Sortie standard (stdout) : Retour d'information sur les \u00e9tapes (indexation, commit, push) et leurs r\u00e9sultats. Cas d'Utilisation Exemple d'Appel Interactif : 1 ./scripts/commit-push.sh 2 # Le script demandera le message de commit * Exemple d'Appel Non-Interactif : 1 ./scripts/commit-push.sh \"fix: Corriger un bug d'affichage sur le bouton principal\"","title":"Commit and Push"},{"location":"scripts/utils/documentation_scripts_git/","text":"Documentation des Scripts Utilitaires Git Ce document d\u00e9crit le fonctionnement et l'utilisation des scripts manage_git.sh et restore_generic.sh . Ces outils ont pour but de standardiser et de simplifier la gestion des d\u00e9p\u00f4ts Git au sein de nos projets. 1. manage_git.sh - Le Couteau Suisse Git Ce script est un outil en ligne de commande pour effectuer les op\u00e9rations Git les plus courantes de mani\u00e8re contr\u00f4l\u00e9e et reproductible. Fonctionnalit\u00e9s V\u00e9rification de l'existence d'un d\u00e9p\u00f4t Git. Initialisation d'un nouveau d\u00e9p\u00f4t. Ajout de d\u00e9p\u00f4ts distants (remotes). Cr\u00e9ation d'un commit initial. Envoi des modifications (push) vers une remote. Gestion des environnements o\u00f9 les emojis ne sont pas support\u00e9s. Utilisation Le script s'utilise avec une commande suivie de ses propres arguments. ./manage_git.sh [--no-emoji] <commande> [arguments...] Option Globale --no-emoji : (Optionnel) Force la d\u00e9sactivation des emojis dans les messages de sortie. Le script tente de d\u00e9tecter automatiquement les terminaux non-UTF-8, mais cette option permet de forcer ce comportement. Commandes check Description : V\u00e9rifie si le dossier courant est un d\u00e9p\u00f4t Git. Usage : ./manage_git.sh check Retourne : Un message de succ\u00e8s ou d'erreur et un code de sortie ( 0 si OK, 1 si non). init Description : Initialise un nouveau d\u00e9p\u00f4t Git ( git init ) si aucun n'existe. Usage : ./manage_git.sh init add-remote <nom> <url> Description : Ajoute un nouveau d\u00e9p\u00f4t distant. Usage : ./manage_git.sh add-remote origin git@github.com:user/repo.git Arguments : <nom> : Le nom de la remote (ex: origin , local_backup ). <url> : L'URL SSH ou HTTPS du d\u00e9p\u00f4t distant. initial-commit <message> Description : Ajoute tous les fichiers du projet ( git add . ) et cr\u00e9e le premier commit. Si l'identit\u00e9 Git (nom/email) n'est pas configur\u00e9e, le script la demandera. Usage : ./manage_git.sh initial-commit \"Premier commit du projet\" Argument : <message> : Le message du commit, entre guillemets. push <nom_remote> <nom_branche> Description : Pousse une branche vers une remote sp\u00e9cifi\u00e9e. Usage : ./manage_git.sh push origin main Arguments : <nom_remote> : Le nom de la remote de destination. <nom_branche> : Le nom de la branche \u00e0 pousser. 2. restore_generic.sh - Restauration de Projet Ce script facilite le clonage d'un projet depuis GitHub en s'assurant que l'authentification par cl\u00e9 SSH est correctement configur\u00e9e sur la machine de l'utilisateur. Fonctionnalit\u00e9s V\u00e9rifie la pr\u00e9sence d'une cl\u00e9 SSH existante ( ~/.ssh/id_rsa ). Si aucune cl\u00e9 n'est trouv\u00e9e, il guide l'utilisateur pour en cr\u00e9er une. Affiche la cl\u00e9 publique et des instructions claires pour l'ajouter \u00e0 GitHub. Clone le d\u00e9p\u00f4t sp\u00e9cifi\u00e9 une fois que l'utilisateur a confirm\u00e9 la configuration. Utilisation Le script prend deux arguments obligatoires. ./restore_generic.sh <utilisateur_github/nom_repo> <dossier_destination> Arguments <utilisateur_github/nom_repo> Description : L'identifiant complet du d\u00e9p\u00f4t sur GitHub. Exemple : labinno01/teams-ai-python-env <dossier_destination> Description : Le nom du dossier qui sera cr\u00e9\u00e9 localement pour contenir le projet clon\u00e9. Exemple : mon-projet-restaure Processus pour l'utilisateur Lancer le script avec les bons arguments. Si aucune cl\u00e9 SSH n'est pr\u00e9sente, suivre les instructions pour en cr\u00e9er une. Copier la cl\u00e9 publique affich\u00e9e par le script. Aller sur github.com/settings/keys et ajouter la cl\u00e9. Revenir au terminal et appuyer sur \"Entr\u00e9e\" pour que le script proc\u00e8de au clonage.","title":"Git Scripts Documentation"},{"location":"scripts/utils/documentation_scripts_git/#documentation-des-scripts-utilitaires-git","text":"Ce document d\u00e9crit le fonctionnement et l'utilisation des scripts manage_git.sh et restore_generic.sh . Ces outils ont pour but de standardiser et de simplifier la gestion des d\u00e9p\u00f4ts Git au sein de nos projets.","title":"Documentation des Scripts Utilitaires Git"},{"location":"scripts/utils/documentation_scripts_git/#1-manage_gitsh-le-couteau-suisse-git","text":"Ce script est un outil en ligne de commande pour effectuer les op\u00e9rations Git les plus courantes de mani\u00e8re contr\u00f4l\u00e9e et reproductible.","title":"1. manage_git.sh - Le Couteau Suisse Git"},{"location":"scripts/utils/documentation_scripts_git/#fonctionnalites","text":"V\u00e9rification de l'existence d'un d\u00e9p\u00f4t Git. Initialisation d'un nouveau d\u00e9p\u00f4t. Ajout de d\u00e9p\u00f4ts distants (remotes). Cr\u00e9ation d'un commit initial. Envoi des modifications (push) vers une remote. Gestion des environnements o\u00f9 les emojis ne sont pas support\u00e9s.","title":"Fonctionnalit\u00e9s"},{"location":"scripts/utils/documentation_scripts_git/#utilisation","text":"Le script s'utilise avec une commande suivie de ses propres arguments. ./manage_git.sh [--no-emoji] <commande> [arguments...]","title":"Utilisation"},{"location":"scripts/utils/documentation_scripts_git/#option-globale","text":"--no-emoji : (Optionnel) Force la d\u00e9sactivation des emojis dans les messages de sortie. Le script tente de d\u00e9tecter automatiquement les terminaux non-UTF-8, mais cette option permet de forcer ce comportement.","title":"Option Globale"},{"location":"scripts/utils/documentation_scripts_git/#commandes","text":"check Description : V\u00e9rifie si le dossier courant est un d\u00e9p\u00f4t Git. Usage : ./manage_git.sh check Retourne : Un message de succ\u00e8s ou d'erreur et un code de sortie ( 0 si OK, 1 si non). init Description : Initialise un nouveau d\u00e9p\u00f4t Git ( git init ) si aucun n'existe. Usage : ./manage_git.sh init add-remote <nom> <url> Description : Ajoute un nouveau d\u00e9p\u00f4t distant. Usage : ./manage_git.sh add-remote origin git@github.com:user/repo.git Arguments : <nom> : Le nom de la remote (ex: origin , local_backup ). <url> : L'URL SSH ou HTTPS du d\u00e9p\u00f4t distant. initial-commit <message> Description : Ajoute tous les fichiers du projet ( git add . ) et cr\u00e9e le premier commit. Si l'identit\u00e9 Git (nom/email) n'est pas configur\u00e9e, le script la demandera. Usage : ./manage_git.sh initial-commit \"Premier commit du projet\" Argument : <message> : Le message du commit, entre guillemets. push <nom_remote> <nom_branche> Description : Pousse une branche vers une remote sp\u00e9cifi\u00e9e. Usage : ./manage_git.sh push origin main Arguments : <nom_remote> : Le nom de la remote de destination. <nom_branche> : Le nom de la branche \u00e0 pousser.","title":"Commandes"},{"location":"scripts/utils/documentation_scripts_git/#2-restore_genericsh-restauration-de-projet","text":"Ce script facilite le clonage d'un projet depuis GitHub en s'assurant que l'authentification par cl\u00e9 SSH est correctement configur\u00e9e sur la machine de l'utilisateur.","title":"2. restore_generic.sh - Restauration de Projet"},{"location":"scripts/utils/documentation_scripts_git/#fonctionnalites_1","text":"V\u00e9rifie la pr\u00e9sence d'une cl\u00e9 SSH existante ( ~/.ssh/id_rsa ). Si aucune cl\u00e9 n'est trouv\u00e9e, il guide l'utilisateur pour en cr\u00e9er une. Affiche la cl\u00e9 publique et des instructions claires pour l'ajouter \u00e0 GitHub. Clone le d\u00e9p\u00f4t sp\u00e9cifi\u00e9 une fois que l'utilisateur a confirm\u00e9 la configuration.","title":"Fonctionnalit\u00e9s"},{"location":"scripts/utils/documentation_scripts_git/#utilisation_1","text":"Le script prend deux arguments obligatoires. ./restore_generic.sh <utilisateur_github/nom_repo> <dossier_destination>","title":"Utilisation"},{"location":"scripts/utils/documentation_scripts_git/#arguments","text":"<utilisateur_github/nom_repo> Description : L'identifiant complet du d\u00e9p\u00f4t sur GitHub. Exemple : labinno01/teams-ai-python-env <dossier_destination> Description : Le nom du dossier qui sera cr\u00e9\u00e9 localement pour contenir le projet clon\u00e9. Exemple : mon-projet-restaure","title":"Arguments"},{"location":"scripts/utils/documentation_scripts_git/#processus-pour-lutilisateur","text":"Lancer le script avec les bons arguments. Si aucune cl\u00e9 SSH n'est pr\u00e9sente, suivre les instructions pour en cr\u00e9er une. Copier la cl\u00e9 publique affich\u00e9e par le script. Aller sur github.com/settings/keys et ajouter la cl\u00e9. Revenir au terminal et appuyer sur \"Entr\u00e9e\" pour que le script proc\u00e8de au clonage.","title":"Processus pour l'utilisateur"},{"location":"scripts/utils/init-repository/","text":"Identification ID de l'Exigence : GIT-REQ-002 Nom du Script : init-repository.sh Version : G\u00e9r\u00e9e par les tags Git (ex: v0.1.0) Objectif (Raison d'\u00eatre) : Assister l'utilisateur dans l'initialisation compl\u00e8te d'un nouveau d\u00e9p\u00f4t Git local, en le liant \u00e0 un d\u00e9p\u00f4t distant et en cr\u00e9ant un premier commit propre. Description Fonctionnelle (Le \"Quoi\") D\u00e9clencheur : Manuellement par le d\u00e9veloppeur, dans le dossier racine d'un projet qui n'est pas encore un d\u00e9p\u00f4t Git. Processus : V\u00e9rification Initiale : Le script v\u00e9rifie d'abord si un dossier .git existe d\u00e9j\u00e0. Si c'est le cas, il informe l'utilisateur que le d\u00e9p\u00f4t est d\u00e9j\u00e0 initialis\u00e9 et se termine. Initialisation : Ex\u00e9cute git init pour cr\u00e9er le d\u00e9p\u00f4t local. Configuration Utilisateur : V\u00e9rifie si user.name et user.email sont configur\u00e9s localement. Si non, il demande \u00e0 l'utilisateur de les saisir (en utilisant la fonction check_git_config de _common.sh). Demande du Distant : Demande \u00e0 l'utilisateur de fournir l'URL SSH du d\u00e9p\u00f4t distant (ex: git@github.com:user/repo.git). Ajout du Distant : Ex\u00e9cute git remote add origin . Cr\u00e9ation du README : Cr\u00e9e un fichier README.md avec le nom du dossier du projet comme titre, pour s'assurer que le premier commit ne soit pas vide. Indexation : Ajoute tous les fichiers \u00e0 l'index avec git add .. Message de Commit : Demande \u00e0 l'utilisateur un message pour le commit initial, en proposant \"feat: Initial commit\" comme valeur par d\u00e9faut. Commit Initial : Ex\u00e9cute git commit avec le message fourni. Push Initial (Optionnel) : Demande \u00e0 l'utilisateur s'il souhaite pousser la branche main vers origin. Si oui, ex\u00e9cute git push -u origin main. R\u00e9sultat Attendu : Le dossier courant est un d\u00e9p\u00f4t Git fonctionnel, avec un remote nomm\u00e9 origin configur\u00e9, un fichier README.md, et un premier commit cr\u00e9\u00e9. La branche main est potentiellement d\u00e9j\u00e0 synchronis\u00e9e avec le d\u00e9p\u00f4t distant. Exigences Non-Fonctionnelles (Les \"Contraintes\") Performance : L'ex\u00e9cution doit \u00eatre rapide, limit\u00e9e principalement par le temps de r\u00e9ponse de l'utilisateur aux questions. S\u00e9curit\u00e9 : Aucune information sensible n'est stock\u00e9e ou affich\u00e9e. Configuration : Le script est enti\u00e8rement interactif et ne n\u00e9cessite aucun fichier de configuration. Gestion des Erreurs : Chaque commande git critique (init, remote add, commit, push) doit \u00eatre v\u00e9rifi\u00e9e. En cas d'\u00e9chec, le script doit afficher un message d'erreur clair et s'arr\u00eater. Sp\u00e9cifications Techniques (Le \"Comment\") Langage et D\u00e9pendances : Bash, git. Le script doit \"sourcer\" _common.sh pour les fonctions utilitaires. Environnement d'Ex\u00e9cution : Tout environnement de type Unix (Linux, macOS, WSL). Entr\u00e9es / Sorties : Arguments en ligne de commande : Aucun. Sortie standard (stdout) : Messages de guidage pour l'assistant interactif et retours d'information sur les commandes ex\u00e9cut\u00e9es. Cas d'Utilisation Exemple d'Appel : 1 # Se placer dans le nouveau projet 2 cd ~/projets/mon-nouveau-site 3 # Lancer l'assistant 4 /chemin/vers/les/scripts/init-repository.sh Processus (mis \u00e0 jour) : 1. V\u00e9rification Initiale : ... (inchang\u00e9) 2. Initialisation : Ex\u00e9cute git init. 3. Configuration Utilisateur : ... (inchang\u00e9) 4. Demande du Distant : Demande \u00e0 l'utilisateur de fournir l'URL SSH du d\u00e9p\u00f4t distant. 5. V\u00e9rification du Distant (Nouvelle \u00c9tape) : * Le script ex\u00e9cute git ls-remote en silence. * Si la commande r\u00e9ussit (code de sortie 0), cela signifie que le d\u00e9p\u00f4t existe. * Le script affiche alors un message d'avertissement et demande \u00e0 l'utilisateur s'il souhaite continuer. * Si l'utilisateur ne confirme pas explicitement, le script s'arr\u00eate avec un message expliquant qu'il devrait peut-\u00eatre utiliser git clone. 6. Ajout du Distant : Ex\u00e9cute git remote add origin . 7. Cr\u00e9ation du README : ... (anciennement 6) 8. Indexation : ... (anciennement 7) 9. Message de Commit : ... (anciennement 8) 10. Commit Initial : ... (anciennement 9) 11. Push Initial (Optionnel) : ... (anciennement 10)","title":"Initialize Repository"},{"location":"scripts/utils/release-version/","text":"Identification ID de l'Exigence : GIT-REQ-005 Nom du Script : release-version.sh Version : G\u00e9r\u00e9e par les tags Git (ex: v0.1.0) Objectif (Raison d'\u00eatre) : Automatiser et s\u00e9curiser le processus de cr\u00e9ation d'une release, en garantissant la synchronisation entre le fichier version.json et les tags Git. Description Fonctionnelle (Le \"Quoi\") D\u00e9clencheur : Manuellement par le d\u00e9veloppeur depuis la branche principale ( main ) lorsque le code est stable et pr\u00eat \u00e0 \u00eatre versionn\u00e9. Processus : V\u00e9rification du Contexte : Le script s'assure qu'il est bien ex\u00e9cut\u00e9 \u00e0 l'int\u00e9rieur d'un d\u00e9p\u00f4t Git. Il v\u00e9rifie que le r\u00e9pertoire de travail est \"propre\" (pas de modifications non commit\u00e9es). Choix de la Version : Il lit la version actuelle depuis version.json . Il demande \u00e0 l'utilisateur de choisir le type de la nouvelle version : PATCH , MINEUR , ou MAJEUR . Il calcule le nouveau num\u00e9ro de version (ex: 0.1.0 -> 0.1.1 ). G\u00e9n\u00e9ration des Notes de Version : Pour un PATCH : Le script g\u00e9n\u00e8re automatiquement la liste des commits depuis le dernier tag. Pour un MINEUR : Il demande \u00e0 l'utilisateur de d\u00e9crire la nouvelle fonctionnalit\u00e9. Pour un MAJEUR : Il demande \u00e0 l'utilisateur de justifier le changement non r\u00e9trocompatible. Confirmation : Le script affiche un r\u00e9sum\u00e9 complet : nouvelle version, message du tag. Il demande une confirmation finale avant d'ex\u00e9cuter les changements. Ex\u00e9cution de la Release : Il met \u00e0 jour le num\u00e9ro de version dans le fichier version.json . Il cr\u00e9e un commit avec le message chore(release): Bump version to X.Y.Z . Il cr\u00e9e un tag Git annot\u00e9 ( git tag -a ) avec le message g\u00e9n\u00e9r\u00e9. Il pousse le nouveau commit et le nouveau tag vers le d\u00e9p\u00f4t distant ( origin ). R\u00e9sultat Attendu : Le projet a une nouvelle version officielle, visible dans version.json et dans les tags Git, et synchronis\u00e9e avec le d\u00e9p\u00f4t distant. Exigences Non-Fonctionnelles (Les \"Contraintes\") S\u00e9curit\u00e9 : Le script ne permet pas de cr\u00e9er une release si le code n'est pas dans un \u00e9tat stable (commit\u00e9e). Configuration : Enti\u00e8rement interactif. Sp\u00e9cifications Techniques (Le \"Comment\") Langage et D\u00e9pendances : Bash, git. Doit \"sourcer\" _common.sh . Environnement d'Ex\u00e9cution : Tout environnement de type Unix (Linux, macOS, WSL). Cas d'Utilisation Exemple d'Appel : 1 # Se placer sur la branche main et s'assurer qu'elle est \u00e0 jour 2 git checkout main 3 git pull 4 # Lancer l'assistant de release 5 ./scripts/release-version.sh","title":"Release Version"},{"location":"scripts/utils/setup-git-ssh/","text":"setup-git-ssh.sh Ce script assiste l'utilisateur dans la configuration et le d\u00e9pannage de l'authentification SSH pour Git, en particulier pour GitHub. Il automatise les \u00e9tapes possibles et fournit des instructions claires pour les actions manuelles requises. Fonctionnalit\u00e9s V\u00e9rification et d\u00e9marrage de l'agent SSH : Le script v\u00e9rifie si l'agent SSH est en cours d'ex\u00e9cution et propose de le d\u00e9marrer si ce n'est pas le cas. Ajout de la cl\u00e9 SSH \u00e0 l'agent : Il guide l'utilisateur pour ajouter sa cl\u00e9 priv\u00e9e SSH \u00e0 l'agent, en proposant un chemin par d\u00e9faut et en v\u00e9rifiant si la cl\u00e9 est d\u00e9j\u00e0 charg\u00e9e. V\u00e9rification de la cl\u00e9 publique sur GitHub (manuel) : Le script fournit des instructions claires pour que l'utilisateur v\u00e9rifie manuellement que sa cl\u00e9 publique correspondante est bien ajout\u00e9e \u00e0 son compte GitHub. Acceptation de la cl\u00e9 d'h\u00f4te de GitHub : Il tente une connexion test \u00e0 GitHub pour s'assurer que la cl\u00e9 d'h\u00f4te de GitHub est ajout\u00e9e aux known_hosts de l'utilisateur, ce qui est crucial pour \u00e9viter les avertissements de s\u00e9curit\u00e9 lors des premi\u00e8res connexions. Utilisation Pour ex\u00e9cuter le script, naviguez jusqu'au r\u00e9pertoire scripts/ de votre projet et ex\u00e9cutez : bash setup-git-ssh.sh Suivez les instructions et les invites du script. Il vous guidera \u00e0 travers les diff\u00e9rentes \u00e9tapes et vous fournira des messages de succ\u00e8s ou d'erreur avec des conseils pour r\u00e9soudre les probl\u00e8mes. Exemples d'utilisation D\u00e9marrer l'agent SSH et ajouter une cl\u00e9 : Le script vous demandera si vous souhaitez d\u00e9marrer l'agent SSH s'il n'est pas actif. Ensuite, il vous invitera \u00e0 fournir le chemin de votre cl\u00e9 SSH priv\u00e9e (par exemple, ~/.ssh/id_rsa ou ~/.ssh/github-monprojet ). V\u00e9rifier l'authentification GitHub : Apr\u00e8s avoir configur\u00e9 votre cl\u00e9, le script effectuera un test de connexion \u00e0 GitHub pour confirmer que tout est correctement configur\u00e9 pour les op\u00e9rations Git via SSH. D\u00e9pendances Ce script d\u00e9pend du fichier _common.sh pour les fonctions utilitaires et les ic\u00f4nes. Assurez-vous que _common.sh est pr\u00e9sent dans le m\u00eame r\u00e9pertoire.","title":"Setup SSH"},{"location":"scripts/utils/setup-git-ssh/#setup-git-sshsh","text":"Ce script assiste l'utilisateur dans la configuration et le d\u00e9pannage de l'authentification SSH pour Git, en particulier pour GitHub. Il automatise les \u00e9tapes possibles et fournit des instructions claires pour les actions manuelles requises.","title":"setup-git-ssh.sh"},{"location":"scripts/utils/setup-git-ssh/#fonctionnalites","text":"V\u00e9rification et d\u00e9marrage de l'agent SSH : Le script v\u00e9rifie si l'agent SSH est en cours d'ex\u00e9cution et propose de le d\u00e9marrer si ce n'est pas le cas. Ajout de la cl\u00e9 SSH \u00e0 l'agent : Il guide l'utilisateur pour ajouter sa cl\u00e9 priv\u00e9e SSH \u00e0 l'agent, en proposant un chemin par d\u00e9faut et en v\u00e9rifiant si la cl\u00e9 est d\u00e9j\u00e0 charg\u00e9e. V\u00e9rification de la cl\u00e9 publique sur GitHub (manuel) : Le script fournit des instructions claires pour que l'utilisateur v\u00e9rifie manuellement que sa cl\u00e9 publique correspondante est bien ajout\u00e9e \u00e0 son compte GitHub. Acceptation de la cl\u00e9 d'h\u00f4te de GitHub : Il tente une connexion test \u00e0 GitHub pour s'assurer que la cl\u00e9 d'h\u00f4te de GitHub est ajout\u00e9e aux known_hosts de l'utilisateur, ce qui est crucial pour \u00e9viter les avertissements de s\u00e9curit\u00e9 lors des premi\u00e8res connexions.","title":"Fonctionnalit\u00e9s"},{"location":"scripts/utils/setup-git-ssh/#utilisation","text":"Pour ex\u00e9cuter le script, naviguez jusqu'au r\u00e9pertoire scripts/ de votre projet et ex\u00e9cutez : bash setup-git-ssh.sh Suivez les instructions et les invites du script. Il vous guidera \u00e0 travers les diff\u00e9rentes \u00e9tapes et vous fournira des messages de succ\u00e8s ou d'erreur avec des conseils pour r\u00e9soudre les probl\u00e8mes.","title":"Utilisation"},{"location":"scripts/utils/setup-git-ssh/#exemples-dutilisation","text":"D\u00e9marrer l'agent SSH et ajouter une cl\u00e9 : Le script vous demandera si vous souhaitez d\u00e9marrer l'agent SSH s'il n'est pas actif. Ensuite, il vous invitera \u00e0 fournir le chemin de votre cl\u00e9 SSH priv\u00e9e (par exemple, ~/.ssh/id_rsa ou ~/.ssh/github-monprojet ). V\u00e9rifier l'authentification GitHub : Apr\u00e8s avoir configur\u00e9 votre cl\u00e9, le script effectuera un test de connexion \u00e0 GitHub pour confirmer que tout est correctement configur\u00e9 pour les op\u00e9rations Git via SSH.","title":"Exemples d'utilisation"},{"location":"scripts/utils/setup-git-ssh/#dependances","text":"Ce script d\u00e9pend du fichier _common.sh pour les fonctions utilitaires et les ic\u00f4nes. Assurez-vous que _common.sh est pr\u00e9sent dans le m\u00eame r\u00e9pertoire.","title":"D\u00e9pendances"},{"location":"scripts/utils/sync-remote/","text":"Identification ID de l'Exigence : GIT-REQ-004 Nom du Script : sync-remote.sh Version : G\u00e9r\u00e9e par les tags Git (ex: v0.1.0) Objectif (Raison d'\u00eatre) : Fournir un moyen s\u00fbr de synchroniser la branche de travail locale avec son \u00e9quivalent sur le d\u00e9p\u00f4t distant, en privil\u00e9giant la s\u00e9curit\u00e9 et la clart\u00e9 sur l'\u00e9tat du d\u00e9p\u00f4t. Description Fonctionnelle (Le \"Quoi\") D\u00e9clencheur : Manuellement par le d\u00e9veloppeur, avant de commencer \u00e0 travailler ou lorsqu'il souhaite r\u00e9cup\u00e9rer les derni\u00e8res mises \u00e0 jour. Processus : V\u00e9rification du Contexte : Le script s'assure qu'il est bien ex\u00e9cut\u00e9 \u00e0 l'int\u00e9rieur d'un d\u00e9p\u00f4t Git. R\u00e9cup\u00e9ration des Donn\u00e9es : Il ex\u00e9cute git fetch pour t\u00e9l\u00e9charger les derni\u00e8res informations du remote sans modifier la copie de travail locale. Analyse de l'\u00c9tat : Il compare la branche locale (HEAD) avec la branche distante suivie. Sc\u00e9narios de Synchronisation : \u00c0 jour : Si les deux branches sont identiques, il informe l'utilisateur que tout est synchronis\u00e9 et se termine. En retard : Si la branche distante a de nouveaux commits, il affiche ces commits et demande \u00e0 l'utilisateur s'il souhaite les int\u00e9grer via git pull --ff-only . Cette commande ne fonctionne que si la branche locale n'a pas de nouveaux commits de son c\u00f4t\u00e9 (avance rapide), ce qui \u00e9vite les merges automatiques non d\u00e9sir\u00e9s. En avance : Si la branche locale a des commits qui ne sont pas sur la branche distante, il en informe l'utilisateur et lui sugg\u00e8re d'utiliser commit-push.sh . Divergence : Si les deux branches ont des commits que l'autre n'a pas, il informe l'utilisateur qu'un merge ou un rebase manuel est n\u00e9cessaire pour r\u00e9soudre le conflit. R\u00e9sultat Attendu : La branche locale est mise \u00e0 jour avec les changements du distant si et seulement si cela peut \u00eatre fait de mani\u00e8re \"fast-forward\" (sans conflit de merge). Exigences Non-Fonctionnelles (Les \"Contraintes\") Performance : Rapide, limit\u00e9e par la vitesse de la connexion r\u00e9seau pour git fetch . S\u00e9curit\u00e9 : En utilisant git pull --ff-only , le script \u00e9vite de cr\u00e9er des commits de merge inattendus, laissant \u00e0 l'utilisateur le contr\u00f4le total en cas de branches divergentes. Configuration : Aucune. Le script est enti\u00e8rement interactif. Gestion des Erreurs : \u00c9choue proprement si git fetch ne fonctionne pas ou si le pull ne peut pas \u00eatre effectu\u00e9 en avance rapide. Sp\u00e9cifications Techniques (Le \"Comment\") Langage et D\u00e9pendances : Bash, git. Doit \"sourcer\" _common.sh . Environnement d'Ex\u00e9cution : Tout environnement de type Unix (Linux, macOS, WSL). Entr\u00e9es / Sorties : Arguments en ligne de commande : Aucun. Sortie standard (stdout) : Informations claires sur l'\u00e9tat de synchronisation et guidage interactif. Cas d'Utilisation Exemple d'Appel : 1 # Se placer dans le projet 2 cd ~/projets/mon-projet 3 # Lancer la synchronisation 4 /chemin/vers/les/scripts/sync-remote.sh","title":"Sync Remote"}]}